import pygame

LIGHT_BLUE = (51, 153, 255)
DARK_BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)

pygame.init()

class Labyrinth():
    def __init__(self, maze, screen_width = 800, screen_height = 800, screen_cell_width = 50):
        self.maze = maze # assumed maze similar style as generated by MazeGenerator class
        self.width = screen_width
        self.height = screen_height
        self.cell_width = screen_cell_width
        self.screen = pygame.display.set_mode((width, height))
        self.screen.fill(WHITE)
        self._max_x = len(self.maze[0]) - 1
        self._max_y = len(self.maze) - 1
        return

    def get_goal(self):
        return (self._max_x + 0.5, self._max_y + 0.5)


    def get_sensor_readings(self, x, y, heading):
        
        return


    def draw_lines(self, xs, ys, color=LIGHT_BLUE):
        coords = [(self.cell_width * xs[i], self.cell_width * ys[i]) for i in range(len(xs))]
        pygame.draw.lines(self.screen, (51, 153, 255), False, coords)
        return
    

    def display(self):
        for row in self.maze:
            for cell in row:
                self._draw_maze_cell(cell)
        pygame.display.flip()
        while pygame.event.wait().type != pygame.QUIT:
            pass
        return


    def _draw_maze_cell(self, maze_cell, lines = []):
        x = maze_cell.x * self.cell_width
        y = maze_cell.y * self.cell_width
        if maze_cell.walls[0]:
            lines.append(((x, y), (x + self.cell_width, y)))
        if maze_cell.walls[1]:
            lines.append(((x + self.cell_width, y), (x + self.cell_width, y + self.cell_width)))
        if maze_cell.walls[2]:
            lines.append(((x + self.cell_width, y + self.cell_width), (x , y + self.cell_width)))
        if maze_cell.walls[3]:
            lines.append(((x, y + self.cell_width), (x , y)))
        for start, end in lines:
            pygame.draw.line(self.screen, BLACK, start, end) 
        return


if __name__ == '__main__':
    from random import seed
    from MazeGenerator import MazeGenerator

    seed(0)
    width = 800
    height = 800
    cell_width = 50
    cols = width // cell_width
    rows = height // cell_width
    gen = MazeGenerator(rows, cols)
    wicked = Labyrinth(gen.maze, width, height, cell_width)
    xs = [x/10 for x in range(5, 40)]
    ys = [y/10 for y in range(5, 40)]
    wicked.draw_lines(xs, ys)
    wicked.display()
